#!/bin/bash -e

# Common defs
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PARENT=$(readlink -f ${DIR}/../)
if [ -z $1 ]; then
    echo "Usage: $0 [install|cleanup] [<CHANGE_ID>] [<REVISION_ID>]"
fi;
echo $@
if [ ! -z $2 ]; then
    CHANGE=$2
    REVISION=$3
    EXTDIR=${PARENT}/external/change/${CHANGE}
    PROD_DIR=${PARENT}/external
else
    EXTDIR=${PARENT}/external
fi;
mkdir -p ${EXTDIR}

PUPPETDIR=${EXTDIR}/puppet
PRIVATEDIR=${PARENT}/external/private
FACTS_ARCHIVE=${PARENT}/puppet-facts.tar.xz

function log () {
    echo "$@"
}

function update_change() {
    log git pull -q https://gerrit.wikimedia.org/r/operations/puppet refs/changes/${CHANGE: -2:2}/$CHANGE/$REVISION
    git pull -q https://gerrit.wikimedia.org/r/operations/puppet refs/changes/${CHANGE: -2:2}/$CHANGE/$REVISION
}

function checkout() {
    log "Checking out repositories"
    pushd ${EXTDIR}
    if [ ! -z ${CHANGE} ]; then
        test -d ${PROD_DIR}/puppet || ( echo "Could not find the original install" && exit 1)
        rsync -avz --delete ${PROD_DIR}/puppet .
        for link in etc var; do
            ln -s ${PROD_DIR}/$link $link
        done;
    else
        git clone https://gerrit.wikimedia.org/r/operations/puppet
        git clone https://gerrit.wikimedia.org/r/labs/private
    fi;
    pushd ${PRIVATEDIR}
    for subdir in modules files; do
        cp -ax ${subdir}/* ${PUPPETDIR}/${subdir}/;
    done
    popd
    pushd ${PUPPETDIR}
    git submodule update --init
    if [ ! -z ${CHANGE} ]; then
        update_change
    fi;
    popd
    popd
}



function update() {
    log "Updating repositories"
    pushd ${PUPPETDIR}
    if [ ! -z ${CHANGE} ]; then
        update_change
    else
        git pull --rebase
    fi;
    git submodule update --init # use --init here in case something went wrong the first time.
    popd
    pushd ${PRIVATEDIR}
    git pull --rebase
    for subdir in modules files; do
        cp -ax ${subdir}/* ${PUPPETDIR}/${subdir}/;
    done
    popd
}

function copy_facts() {
    test -f ${FACTS_ARCHIVE} || ( log "Could not find ${FACTS_ARCHIVE}" && exit 1)
    # This expects a file called puppet-facts.tar.xz in the parent of the installation
    pushd ${EXTDIR}
    tar -C var/ --strip-components=3 -xJvf ${FACTS_ARCHIVE}
    popd
}

function purge() {
    rm -rf ${PUPPETDIR}
    rm -rf ${PRIVATEDIR}
    rm -rf ${DIR}/var/yaml
}



#start from the script dir, please
pushd ${DIR}
case $1 in
    install)
        if [ -d ${PUPPETDIR} ]; then
            update
        else
            checkout
        fi;

        log "Putting the facts in place."
        copy_facts
        ;;
    cleanup)
        purge
        ;;
esac;
popd
