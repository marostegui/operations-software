#!/bin/bash -e

# Common defs
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PARENT=$(readlink -f ${DIR}/../)
if [ -z $1 ]; then
    echo "Usage: $0 [install|cleanup] [<CHANGE_ID>] [<REVISION_ID>]"
fi;

# Define defaults based on whether we're acting on a change or not.
if [ ! -z $2 ]; then
    CHANGE=$2
    REVISION=$3
    EXTDIR=${PARENT}/external/change/${CHANGE}
    PROD_DIR=${PARENT}/external
else
    EXTDIR=${PARENT}/external
fi;
mkdir -p ${EXTDIR}

PUPPETDIR=${EXTDIR}/puppet
PRIVATEDIR=${PARENT}/external/private
FACTS_ARCHIVE=${PARENT}/puppet-facts.tar.xz
HIERA_CONFIG_FILE=${PUPPETDIR}/modules/puppetmaster/files/production.hiera.yaml

function log () {
    echo "$@"
}

function update_change() {
    log "fetching the change"
    pushd ${EXTDIR}/puppet
    log git pull -q https://gerrit.wikimedia.org/r/operations/puppet refs/changes/${CHANGE: -2:2}/$CHANGE/$REVISION
    git pull -q https://gerrit.wikimedia.org/r/operations/puppet refs/changes/${CHANGE: -2:2}/$CHANGE/$REVISION
    popd
}

function purge_change() {
    test -z ${EXTDIR} && return
    (
        echo ${EXTDIR} | grep 'change' > /dev/null;
        if [ $? -eq 0 ]; then
            rm -rf ${PUPPETDIR}
        fi
    )
}

function setup_change() {
    test -d ${PROD_DIR}/puppet || ( echo "Could not find the original install" && exit 1)
    pushd ${PROD_DIR}/puppet
    #ensure the prod branch is up to date
    log "Updating the production repository"
    git pull --rebase
    popd
    pushd ${EXTDIR}
    rsync -avz --delete ${PROD_DIR}/puppet .
    test -d var || ln -s ${PROD_DIR}/var var
    if [ ! -d etc ]; then
        mkdir etc
        ln -s ${PROD_DIR}/etc/ssl etc/ssl
    fi;
    popd
    update_change
}

function copy_hiera() {
    if [ -f ${HIERA_CONFIG_FILE} ]; then
        HIERADATA_DIR=${PUPPETDIR}/hieradata
        log "Patching and copying the hiera config"
        sed s,/etc/puppet/hieradata,${HIERADATA_DIR}, ${HIERA_CONFIG_FILE} | \
            sed s,/etc/puppet/private,${PRIVATEDIR}, -  > ${EXTDIR}/etc/hiera.yaml
    fi;
}

function checkout() {
    log "Checking out repositories"
    pushd ${EXTDIR}
    if [ ! -z ${CHANGE} ]; then
        setup_change
    else
        git clone https://gerrit.wikimedia.org/r/operations/puppet
        git clone https://gerrit.wikimedia.org/r/labs/private
    fi;
    pushd ${PRIVATEDIR}
    for subdir in modules files; do
        cp -ax ${subdir}/* ${PUPPETDIR}/${subdir}/;
    done
    popd
    pushd ${PUPPETDIR}
    git submodule update --init
    popd
    popd
}



function update() {
    log "Updating repositories"
    if [ ! -z ${CHANGE} ]; then
        purge_change
        setup_change
    else
        pushd ${PUPPETDIR}
        git pull --rebase
        popd
    fi;
    pushd ${PUPPETDIR}
    git submodule update --init # use --init here in case something went wrong the first time.
    popd
    pushd ${PRIVATEDIR}
    git pull --rebase
    for subdir in modules files; do
        cp -ax ${subdir}/* ${PUPPETDIR}/${subdir}/;
    done
    popd
}

function copy_facts() {
    # there is no need to block run if facts are not in place.
    if [ ! -f ${FACTS_ARCHIVE} ]; then
        log "Could not find ${FACTS_ARCHIVE}"
        return
    fi;
    # This expects a file called puppet-facts.tar.xz in the parent of the installation
    pushd ${EXTDIR}
    log "Extracting the facts archive"
    tar -C var/ --strip-components=3 -xJf ${FACTS_ARCHIVE}
    popd
}

function purge() {
    rm -rf ${PUPPETDIR}
    rm -rf ${PRIVATEDIR}
    rm -rf ${DIR}/var/yaml
}

function setup_naggen() {
    if [ ! -f /usr/local/bin/naggen2 -a $UID -eq 0 ];  then
        # do this on vagrant only, where we run as root.
        cp ${PUPPETDIR}/modules/puppetmaster/files/naggen2 /usr/local/bin/naggen2
    fi;
}



#start from the script dir, please
pushd ${DIR}
case $1 in
    install)
        if [ -d ${PUPPETDIR} ]; then
            update
        else
            checkout
        fi;

        log "Putting the facts in place."
        copy_facts
        setup_naggen
        copy_hiera
        ;;
    cleanup)
        purge
        ;;
esac;
popd
